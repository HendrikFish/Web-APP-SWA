name: SmartWorkArt CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.x'
  MONGODB_URI: mongodb://localhost:27017/smartworkart_test
  JWT_SECRET: test-secret-key-for-ci
  LOG_LEVEL: error

jobs:
  # Lint und Code-Qualität
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run ESLint
      run: |
        npm run lint --if-present
        
    - name: Check code formatting
      run: |
        npm run format:check --if-present

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
        
    - name: Wait for MongoDB
      run: |
        until mongo --eval "print('MongoDB is ready')"; do
          echo "Waiting for MongoDB..."
          sleep 2
        done
        
    - name: Run Backend Tests
      run: |
        cd backend
        npm run test
        
    - name: Run Backend Tests with Coverage
      run: |
        cd backend
        npm run test:coverage
        
    - name: Upload Backend Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run Frontend Unit Tests
      run: |
        cd frontend
        npm run test --if-present
        
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
        
    - name: Test Frontend Build
      run: |
        cd frontend
        npm run preview &
        sleep 5
        curl -f http://localhost:4173/ || exit 1

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Start Backend Server
      run: |
        cd backend
        npm start &
        sleep 10
        
    - name: Start Frontend Server
      run: |
        cd frontend
        npm run preview &
        sleep 5
        
    - name: Run Integration Tests
      run: |
        npm run test:integration --if-present
        
    - name: API Health Check
      run: |
        curl -f http://localhost:3000/health || exit 1

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate
        
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Deployment (nur bei main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../frontend && npm ci
        
    - name: Build Frontend for Production
      run: |
        cd frontend
        npm run build
        
    - name: Run Production Tests
      run: |
        cd backend
        NODE_ENV=production npm run test
        
    - name: Deploy to Production
      id: deploy
      run: |
        echo "Deploying to production..."
        # Hier würde das eigentliche Deployment stattfinden
        # z.B. zu Vercel, Netlify, AWS, etc.
        echo "url=https://smartworkart.example.com" >> $GITHUB_OUTPUT
        
    - name: Health Check after Deployment
      run: |
        sleep 30
        curl -f ${{ steps.deploy.outputs.url }}/health || exit 1
        
    - name: Notify Team
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Dependency Updates (wöchentlich)
  dependency-updates:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Update Dependencies
      run: |
        npx npm-check-updates -u
        cd backend && npx npm-check-updates -u
        cd ../frontend && npx npm-check-updates -u
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Automated Dependency Updates'
        body: |
          Automated dependency updates created by GitHub Actions.
          
          Please review and test before merging.
        branch: automated-dependency-updates 